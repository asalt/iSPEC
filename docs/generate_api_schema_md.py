#!/usr/bin/env python
"""Generate docs/api-schema.md from live schema.

This script regenerates the API schema documentation by building the
`/people/schema` response directly from the code. The markdown file is
written next to this script.
"""
from pathlib import Path
import json
import sys

ROOT = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(ROOT / 'src'))

from ispec.db.models import Person
from ispec.api.models.modelmaker import make_pydantic_model_from_sqlalchemy
from ispec.api.routes.schema import build_form_schema

DOC_TEMPLATE = """<!-- This file is generated by docs/generate_api_schema_md.py -->
# API Schema Generation

This document describes how iSPEC derives JSON schemas with UI hints for its CRUD endpoints.

## Overview

When a router is generated for a SQLAlchemy model, three helper functions collaborate:

1. **`make_pydantic_model_from_sqlalchemy`** converts a SQLAlchemy model into a Pydantic model. It walks each mapped column, determines the Python type and whether the field should be optional, and builds a new `BaseModel` subclass for create or read operations.
2. **`build_form_schema`** takes the SQLAlchemy model and the generated Pydantic model and produces a JSON schema for forms. It starts with `CreateModel.model_json_schema()`, then iterates over each property to attach UI metadata and injects top-level ordering and section information.
3. **`ui_from_column`** inspects individual SQLAlchemy `Column` objects to infer UI metadata such as the component type (`Text`, `Textarea`, `Select`, `SelectAsync`, etc.), `optional` flags for nullable fields, `autofill` flags for defaults, or `optionsEndpoint` for foreign keys.

The `/people/schema` endpoint runs these steps for the `Person` model.

## Example `/people/schema` Response

```json
{schema_json}
```

Each field includes a `ui` object describing how it should render, while the root `ui` object provides global hints such as the display title, field order, and optional sections.
"""


def main() -> None:
    # Build the schema for the Person model as the API endpoint would
    PersonCreate = make_pydantic_model_from_sqlalchemy(Person, name_suffix='Create')
    schema = build_form_schema(Person, PersonCreate)
    schema_json = json.dumps(schema, indent=2)

    doc = DOC_TEMPLATE.format(schema_json=schema_json)

    out_path = Path(__file__).with_name('api-schema.md')
    out_path.write_text(doc + '\n')


if __name__ == '__main__':
    main()
